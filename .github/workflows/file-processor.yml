name: File Processor

on:
  push:
    paths:
      - 'data/input/*.pca'
      - 'json/*.json'
      - '!**/*.md'
      - '!.gitignore'
  workflow_dispatch:
    inputs:
      filename:
        description: 'File to process'
        required: true
        default: 'Nano Di Side.pca'
        type: string

permissions:
  contents: write
  id-token: write
  actions: read
  attestations: write

jobs:
  process-and-release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install SLSA verifier
      run: |
        mkdir -p $HOME/.local/bin
        wget -O $HOME/.local/bin/slsa-verifier https://github.com/slsa-framework/slsa-verifier/releases/download/v2.0.0/slsa-verifier-linux-amd64
        chmod +x $HOME/.local/bin/slsa-verifier
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
        
    - name: Process File
      id: process
      run: |
        mkdir -p data/output
        
        # Debug event info
        echo "Event name: ${{ github.event_name }}"
        echo "Event inputs: ${{ toJSON(github.event.inputs) }}"
        
        # Check if this is a file deletion event
        if [[ "${{ github.event_name }}" == "push" ]]; then
          # Fetch git history first
          git fetch --prune --unshallow
          
          # Get the list of deleted files from git
          DELETED_FILES=$(git diff --name-only --diff-filter=D ${{ github.event.before }} ${{ github.event.after }} || echo "")
          if [[ -n "$DELETED_FILES" ]]; then
            echo "Deleted files: $DELETED_FILES"
            echo "deleted=true" >> $GITHUB_OUTPUT
            echo "Detected file deletion event - skipping processing"
            exit 0
          fi
          
          # Get the list of added/modified files
          CHANGED_FILES=$(git diff --name-only --diff-filter=AM ${{ github.event.before }} ${{ github.event.after }} || echo "")
          echo "Changed files: $CHANGED_FILES"
          
          # Process only PCA or JSON files
          while IFS= read -r file; do
            echo "Checking file: $file"
            # Debug pattern matching
            [[ "$file" == data/input/*.pca ]] && echo "Matches PCA pattern"
            [[ "$file" == json/*.json ]] && echo "Matches JSON pattern"
            
            if [[ "$file" == data/input/*.pca || "$file" == json/*.json ]]; then
              echo "Processing changed file: $file"
              
              if [[ "$file" == *.pca ]]; then
                OUTPUT_NAME=$(basename "$file" .pca).pca.json
                echo "Converting PCA file to JSON: $file -> $OUTPUT_NAME"
                python3 .github/scripts/pca_to_json.py "$file"
                OUTPUT_PATH="data/output/$OUTPUT_NAME"
                
                # Verify output was created
                if [[ -f "$OUTPUT_PATH" ]]; then
                  echo "Successfully created output file: $OUTPUT_PATH"
                  echo "filename=$OUTPUT_NAME" >> $GITHUB_OUTPUT
                  echo "filepath=$OUTPUT_PATH" >> $GITHUB_OUTPUT
                  echo "processed=true" >> $GITHUB_OUTPUT
                else
                  echo "Failed to create output file: $OUTPUT_PATH"
                  exit 1
                fi
              else
                echo "filename=$file" >> $GITHUB_OUTPUT
                echo "filepath=$file" >> $GITHUB_OUTPUT
              fi
              
              # We'll process only the first matching file
              break
            else
              echo "File does not match patterns: $file"
            fi
          done <<< "$CHANGED_FILES"
          
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          if [[ -z "${{ github.event.inputs.filename }}" ]]; then
            echo "Error: No filename provided"
            exit 1
          fi
          
          echo "Processing file: ${{ github.event.inputs.filename }}"
          
          if [[ "${{ github.event.inputs.filename }}" == *.pca ]]; then
            INPUT_FILE="data/input/${{ github.event.inputs.filename }}"
            echo "Input file path: $INPUT_FILE"
            
            # Check if input PCA file exists
            if [[ ! -f "$INPUT_FILE" ]]; then
              echo "Error: PCA file '$INPUT_FILE' not found"
              exit 1
            fi
            
            OUTPUT_NAME=$(basename "${{ github.event.inputs.filename }}" .pca).pca.json
            echo "Output name: $OUTPUT_NAME"
            python3 .github/scripts/pca_to_json.py "$INPUT_FILE"
            OUTPUT_PATH="data/output/$OUTPUT_NAME"
            echo "Output path: $OUTPUT_PATH"
            echo "filename=$OUTPUT_NAME" >> $GITHUB_OUTPUT
            echo "filepath=$OUTPUT_PATH" >> $GITHUB_OUTPUT
            
            # Verify PCA output file was created
            if [[ ! -f "$OUTPUT_PATH" ]]; then
              echo "Error: Output file was not created"
              exit 1
            fi
          else
            if [[ -f "${{ github.event.inputs.filename }}" ]]; then
              echo "filename=${{ github.event.inputs.filename }}" >> $GITHUB_OUTPUT
              echo "filepath=${{ github.event.inputs.filename }}" >> $GITHUB_OUTPUT
            else
              echo "Error: File '${{ github.event.inputs.filename }}' not found"
              exit 1
            fi
          fi
        fi
        
        # Don't exit if we have processed files
        if [[ -n "$OUTPUT_PATH" ]]; then
          echo "processed=true" >> $GITHUB_OUTPUT
          echo "deleted=false" >> $GITHUB_OUTPUT
        else
          echo "No valid files to process"
          echo "processed=false" >> $GITHUB_OUTPUT
          echo "deleted=true" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Debug outputs
        echo "GITHUB_OUTPUT contents:"
        cat $GITHUB_OUTPUT

    - name: Commit Output
      if: steps.process.outputs.processed == 'true'
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add data/output/
        git commit -m "Add processed output for ${{ steps.process.outputs.filename }}" || echo "No changes to commit"
        git push

    - name: Upload Artifact
      if: steps.process.outputs.processed == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: processed-file
        path: ${{ steps.process.outputs.filepath }}
        retention-days: 5

    - name: Debug File Path
      if: steps.process.outputs.processed == 'true'
      run: |
        echo "Current directory: $(pwd)"
        echo "File path from output: ${{ steps.process.outputs.filepath }}"
        echo "Directory contents:"
        ls -la data/output/
        echo "File exists check:"
        test -f "${{ steps.process.outputs.filepath }}" && echo "File exists" || echo "File does not exist"
        echo "File contents preview:"
        head -n 5 "${{ steps.process.outputs.filepath }}" || echo "Could not read file"

    - name: Verify File for Attestation
      if: steps.process.outputs.processed == 'true'
      continue-on-error: true
      run: |
        echo "Starting file verification..."
        echo "Filepath from outputs: ${{ steps.process.outputs.filepath }}"
        if [[ -z "${{ steps.process.outputs.filepath }}" ]]; then
          echo "Warning: filepath is empty"
          exit 0
        fi
        echo "Verifying file at: ${{ steps.process.outputs.filepath }}"
        if [[ -f "${{ steps.process.outputs.filepath }}" ]]; then
          ls -l "${{ steps.process.outputs.filepath }}"
          echo "File contents:"
          cat "${{ steps.process.outputs.filepath }}"
        else
          echo "Warning: File does not exist at specified path"
        fi

    - name: Generate Attestation
      if: steps.process.outputs.processed == 'true'
      continue-on-error: true
      id: attest
      uses: actions/attest@v2.1.0
      with:
        subject-path: ${{ steps.process.outputs.filepath }}
        predicate-type: 'https://in-toto.io/attestation/release/v0.1'
        predicate: |
          {
            "purl": "pkg:github/${{ github.repository }}",
            "version": "${{ github.sha }}",
            "metadata": {
              "buildInvocationId": "${{ github.run_id }}",
              "completeness": {
                "parameters": true,
                "environment": true,
                "materials": true
              }
            }
          }

    - name: Generate Release Notes
      if: steps.process.outputs.processed == 'true'
      id: release_notes
      run: |
        # Create a temporary file for the release notes
        NOTES=$(mktemp)
        
        # Get file info - using Linux stat format
        FILE_SIZE=$(stat -c%s "${{ steps.process.outputs.filepath }}" || echo "N/A")
        
        # Get the original PCA file path
        PCA_FILE="data/input/$(basename "${{ steps.process.outputs.filename }}" .json)"
        
        # Function to clean up values (remove newlines and extra spaces)
        function clean_value() {
          echo "$1" | tr -d '\n' | tr -s ' ' | sed 's/^ *//;s/ *$//'
        }
        
        # Function to extract value after equals sign
        function get_pca_value() {
          local pattern="$1"
          local default="$2"
          grep -o "$pattern=[^ ]*" "$PCA_FILE" | cut -d'=' -f2 | clean_value || echo "$default"
        }
        
        # Extract values from PCA file
        echo "Looking for values in: $PCA_FILE"
        SYSTEM_NAME=$(get_pca_value "SystemName" "v|tome|x m")
        SOFTWARE_VERSION=$(get_pca_value "Version" "2.8.2.20099")
        NUM_IMAGES=$(get_pca_value "NumberImages" "N/A")
        
        # Debug PCA extraction
        echo "Raw PCA file content:"
        cat "$PCA_FILE"
        echo "---"
        echo "System name: $SYSTEM_NAME"
        echo "Software version: $SOFTWARE_VERSION"
        echo "Number of images: $NUM_IMAGES"
        
        # Extract JSON values with error checking
        function get_json_value() {
          local key="$1"
          local default="$2"
          local value
          value=$(jq -r ".$key // \"$default\"" "${{ steps.process.outputs.filepath }}" 2>/dev/null || echo "$default")
          clean_value "$value"
        }
        
        # Get all values with error handling and defaults
        DIM_X=$(get_json_value "DimX" "N/A")
        DIM_Y=$(get_json_value "DimY" "N/A")
        BIT_PP=$(get_json_value "BitPP" "16")
        PIXEL_X=$(get_json_value "PixelsizeX" "N/A")
        PIXEL_Y=$(get_json_value "PixelsizeY" "N/A")
        VOXEL_X=$(get_json_value "VoxelSizeX" "N/A")
        EVENT_DATE=$(get_json_value "Date" "N/A")
        FILTER=$(get_json_value "Filter" "N/A")
        EXPOSURE=$(get_json_value "TimingVal" "N/A")
        FRAME_AVG=$(get_json_value "Avg" "N/A")
        VOLTAGE=$(get_json_value "Voltage" "N/A")
        CURRENT=$(get_json_value "Current" "N/A")
        FDD=$(get_json_value "FDD" "N/A")
        FOD=$(get_json_value "FOD" "N/A")
        MAG=$(get_json_value "Magnification" "N/A")
        
        # Debug output
        echo "PCA file contents:"
        cat "$PCA_FILE"
        echo "NumberImages value: $NUM_IMAGES"
        
        # Calculate power (voltage * current in watts)
        if [[ "$VOLTAGE" != "N/A" && "$CURRENT" != "N/A" ]]; then
          POWER=$(echo "$VOLTAGE * $CURRENT / 1000" | bc -l)
          POWER=$(printf "%.2f" $POWER)
        else
          POWER="N/A"
        fi
        
        # Calculate SOD and SDD from FOD and FDD
        if [[ "$FDD" != "N/A" && "$FOD" != "N/A" ]]; then
          SOD=$FOD
          SDD=$FDD
        else
          SOD="N/A"
          SDD="N/A"
        fi
        
        # Debug output
        echo "Extracted values:"
        echo "File size: $FILE_SIZE"
        echo "Number of images: $NUM_IMAGES"
        echo "Exposure time: $EXPOSURE"
        echo "Frame averaging: $FRAME_AVG"
        echo "Power: $POWER"
        echo "SOD: $SOD"
        echo "SDD: $SDD"
        
        # Get the creator (GitHub username)
        if [[ "${{ github.event_name }}" == "push" ]]; then
          CREATOR="${{ github.event.pusher.name }}"
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          CREATOR="${{ github.actor }}"
        else
          CREATOR="unknown"
        fi
        echo "Creator: $CREATOR"
        
        # Generate the release notes with cleaned values
        cat > "$NOTES" << EOF
        # File Object Details
        
        | Field | Value |
        |-------|-------|
        | File name | $(clean_value "${{ steps.process.outputs.filename }}") |
        | File format | .pca |
        | File size | ${FILE_SIZE} bytes |
        | Image width | ${DIM_X} |
        | Image height | ${DIM_Y} |
        | Color space | BlackIsZero |
        | Color depth | ${BIT_PP} |
        | Compression | Uncompressed |
        | X pixel spacing | ${PIXEL_X} |
        | Y pixel spacing | ${PIXEL_Y} |
        | Z pixel spacing | ${PIXEL_X} |
        | Pixel spacing units | Mm |
        | Slice thickness | ${VOXEL_X} |
        | Number of images in set | ${NUM_IMAGES} |
        
        # Image Acquisition Details
        
        | Field | Value |
        |-------|-------|
        | Modality | X-Ray Computed Tomography (CT/microCT) |
        | Device | ${SYSTEM_NAME} |
        | Device facility | Custom Build |
        | Creator | ${CREATOR} |
        | Event date | ${EVENT_DATE} |
        | Software | phoenix datos|x ${SOFTWARE_VERSION} |
        | Filter | ${FILTER} |
        | Exposure time | ${EXPOSURE} ms |
        | Flux normalization | Yes |
        | Shading correction | Yes |
        | Frame averaging | ${FRAME_AVG} |
        | Projections | ${NUM_IMAGES} |
        | Voltage | ${VOLTAGE} |
        | Power | ${POWER} W |
        | Amperage | ${CURRENT} |
        | Target material | Tungsten |
        | Detector type | CMOS |
        | Source object distance | ${SOD} mm |
        | Source detector distance | ${SDD} mm |
        | Optical magnification | ${MAG}x |
        | Attestation | ${{ steps.attest.outputs.attestation-url || 'Attestation failed' }} |
        EOF
        
        # Debug the generated notes
        echo "Generated release notes:"
        cat "$NOTES"
        
        # Save the release notes to the output
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        cat "$NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      if: steps.process.outputs.processed == 'true'
      continue-on-error: true
      uses: softprops/action-gh-release@v1
      with:
        tag_name: scan-${{ github.run_number }}
        name: "Scan: ${{ steps.process.outputs.filename }}"
        body: ${{ steps.release_notes.outputs.notes }}
        files: |
          ${{ steps.process.outputs.filepath }}
          ${{ steps.attest.outputs.bundle-path }}
