name: File Processor

on:
  push:
    paths:
      - 'data/input/*.pca'
      - 'json/*.json'
      - '!**/*.md'
      - '!.gitignore'
  workflow_dispatch:
    inputs:
      filename:
        description: 'File to process'
        required: true
        default: 'Nano Di Side.pca'
        type: string

permissions:
  contents: write
  id-token: write
  actions: read
  attestations: write

jobs:
  process-and-release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install SLSA verifier
      run: |
        mkdir -p $HOME/.local/bin
        wget -O $HOME/.local/bin/slsa-verifier https://github.com/slsa-framework/slsa-verifier/releases/download/v2.0.0/slsa-verifier-linux-amd64
        chmod +x $HOME/.local/bin/slsa-verifier
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
    - name: Process File
      id: process
      run: |
        mkdir -p data/output
        
        # Debug event info
        echo "Event name: ${{ github.event_name }}"
        echo "Event inputs: ${{ toJSON(github.event.inputs) }}"
        
        # Check if this is a file deletion event
        if [[ "${{ github.event_name }}" == "push" ]]; then
          # Fetch git history first
          git fetch --prune --unshallow
          
          # Get the list of deleted files from git
          DELETED_FILES=$(git diff --name-only --diff-filter=D ${{ github.event.before }} ${{ github.event.after }} || echo "")
          if [[ -n "$DELETED_FILES" ]]; then
            echo "Deleted files: $DELETED_FILES"
            echo "deleted=true" >> $GITHUB_OUTPUT
            echo "Detected file deletion event - skipping processing"
            exit 0
          fi
          
          # Get the list of added/modified files
          CHANGED_FILES=$(git diff --name-only --diff-filter=AM ${{ github.event.before }} ${{ github.event.after }} || echo "")
          echo "Changed files: $CHANGED_FILES"
          
          # Process only PCA or JSON files
          while IFS= read -r file; do
            if [[ "$file" =~ ^data/input/.*\.pca$ || "$file" =~ ^json/.*\.json$ ]]; then
              echo "Processing changed file: $file"
              
              if [[ "$file" == *.pca ]]; then
                OUTPUT_NAME=$(basename "$file" .pca).pca.json
                python3 .github/scripts/pca_to_json.py "$file"
                OUTPUT_PATH="data/output/$OUTPUT_NAME"
                echo "filename=$OUTPUT_NAME" >> $GITHUB_OUTPUT
                echo "filepath=$OUTPUT_PATH" >> $GITHUB_OUTPUT
              else
                echo "filename=$file" >> $GITHUB_OUTPUT
                echo "filepath=$file" >> $GITHUB_OUTPUT
              fi
              
              # We'll process only the first matching file
              break
            fi
          done <<< "$CHANGED_FILES"
          
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          if [[ -z "${{ github.event.inputs.filename }}" ]]; then
            echo "Error: No filename provided"
            exit 1
          fi
          
          echo "Processing file: ${{ github.event.inputs.filename }}"
          
          if [[ "${{ github.event.inputs.filename }}" == *.pca ]]; then
            INPUT_FILE="data/input/${{ github.event.inputs.filename }}"
            echo "Input file path: $INPUT_FILE"
            
            # Check if input PCA file exists
            if [[ ! -f "$INPUT_FILE" ]]; then
              echo "Error: PCA file '$INPUT_FILE' not found"
              exit 1
            fi
            
            OUTPUT_NAME=$(basename "${{ github.event.inputs.filename }}" .pca).pca.json
            echo "Output name: $OUTPUT_NAME"
            python3 .github/scripts/pca_to_json.py "$INPUT_FILE"
            OUTPUT_PATH="data/output/$OUTPUT_NAME"
            echo "Output path: $OUTPUT_PATH"
            echo "filename=$OUTPUT_NAME" >> $GITHUB_OUTPUT
            echo "filepath=$OUTPUT_PATH" >> $GITHUB_OUTPUT
            
            # Verify PCA output file was created
            if [[ ! -f "$OUTPUT_PATH" ]]; then
              echo "Error: Output file was not created"
              exit 1
            fi
          else
            if [[ -f "${{ github.event.inputs.filename }}" ]]; then
              echo "filename=${{ github.event.inputs.filename }}" >> $GITHUB_OUTPUT
              echo "filepath=${{ github.event.inputs.filename }}" >> $GITHUB_OUTPUT
            else
              echo "Error: File '${{ github.event.inputs.filename }}' not found"
              exit 1
            fi
          fi
        fi
        
        # Verify we have set the outputs
        if [[ -z "${{ steps.process.outputs.filepath }}" ]]; then
          echo "No valid files to process"
          echo "deleted=true" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        echo "deleted=false" >> $GITHUB_OUTPUT
        
        # Debug outputs
        echo "GITHUB_OUTPUT contents:"
        cat $GITHUB_OUTPUT

    - name: Debug File Path
      if: steps.process.outputs.deleted != 'true'
      run: |
        echo "Current directory: $(pwd)"
        echo "File path from output: ${{ steps.process.outputs.filepath }}"
        echo "Directory contents:"
        ls -la data/output/
        echo "File exists check:"
        test -f "${{ steps.process.outputs.filepath }}" && echo "File exists" || echo "File does not exist"
        echo "File contents preview:"
        head -n 5 "${{ steps.process.outputs.filepath }}" || echo "Could not read file"

    - name: Verify File for Attestation
      if: steps.process.outputs.deleted != 'true'
      continue-on-error: true
      run: |
        echo "Starting file verification..."
        echo "Filepath from outputs: ${{ steps.process.outputs.filepath }}"
        if [[ -z "${{ steps.process.outputs.filepath }}" ]]; then
          echo "Warning: filepath is empty"
          exit 0
        fi
        echo "Verifying file at: ${{ steps.process.outputs.filepath }}"
        if [[ -f "${{ steps.process.outputs.filepath }}" ]]; then
          ls -l "${{ steps.process.outputs.filepath }}"
          echo "File contents:"
          cat "${{ steps.process.outputs.filepath }}"
        else
          echo "Warning: File does not exist at specified path"
        fi

    - name: Generate Attestation
      if: steps.process.outputs.deleted != 'true'
      continue-on-error: true
      id: attest
      uses: actions/attest@v2.1.0
      with:
        subject-path: ${{ steps.process.outputs.filepath }}
        predicate-type: 'https://in-toto.io/attestation/release/v0.1'
        predicate: |
          {
            "purl": "pkg:github/${{ github.repository }}",
            "version": "${{ github.sha }}",
            "metadata": {
              "buildInvocationId": "${{ github.run_id }}",
              "completeness": {
                "parameters": true,
                "environment": true,
                "materials": true
              }
            }
          }

    - name: Create Release
      if: steps.process.outputs.deleted != 'true'
      continue-on-error: true
      uses: softprops/action-gh-release@v1
      with:
        tag_name: scan-${{ github.run_number }}
        name: "Scan: ${{ steps.process.outputs.filename }}"
        body: |
          Processed file: ${{ steps.process.outputs.filename }}
          Attestation: ${{ steps.attest.outputs.attestation-url || 'Attestation failed' }}
        files: |
          ${{ steps.process.outputs.filepath }}
          ${{ steps.attest.outputs.bundle-path }}
