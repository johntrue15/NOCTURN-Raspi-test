name: Create Release with Attestation

on:
  push:
    paths:
      - 'json/*.json'
  workflow_dispatch:
    inputs:
      filename:
        description: 'JSON filename to test'
        required: true
        default: 'Nano Di Side.json'

permissions:
  contents: write
  id-token: write
  actions: read

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Get JSON filename
      id: get-filename
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          FILENAME="${{ github.event.inputs.filename }}"
        else
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          FILENAME=$(echo $COMMIT_MSG | grep -o 'Added.*\.json' | cut -d' ' -f2)
        fi
        echo "filename=$FILENAME" >> $GITHUB_OUTPUT
        echo "Found JSON file: $FILENAME"

    - name: Extract metadata
      id: metadata
      run: |
        FILENAME="${{ steps.get-filename.outputs.filename }}"
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          # For testing, use sample data
          VOLTAGE="190"
          CURRENT="130"
          FDD="802.77534791"
          FOD="105.8731875"
          MAG="7.58242353"
          VOXEL_X="0.02637679"
          VOXEL_Y="0.02637679"
        else
          # Normal processing from JSON file
          JSON_PATH="json/$FILENAME"
          VOLTAGE=$(jq -r '.Voltage // "N/A"' "$JSON_PATH")
          CURRENT=$(jq -r '.Current // "N/A"' "$JSON_PATH")
          FDD=$(jq -r '.FDD // "N/A"' "$JSON_PATH")
          FOD=$(jq -r '.FOD // "N/A"' "$JSON_PATH")
          MAG=$(jq -r '.Magnification // "N/A"' "$JSON_PATH")
          VOXEL_X=$(jq -r '.VoxelSizeX // "N/A"' "$JSON_PATH")
          VOXEL_Y=$(jq -r '.VoxelSizeY // "N/A"' "$JSON_PATH")
        fi
        
        # Create release body
        BODY="## Scan Parameters
        - Voltage: ${VOLTAGE}kV
        - Current: ${CURRENT}µA
        - FDD: ${FDD}mm
        - FOD: ${FOD}mm
        - Magnification: ${MAG}x
        - Voxel Size X: ${VOXEL_X}µm
        - Voxel Size Y: ${VOXEL_Y}µm"
        
        # Escape newlines and quotes for GitHub Actions
        BODY="${BODY//'%'/'%25'}"
        BODY="${BODY//$'\n'/'%0A'}"
        BODY="${BODY//$'\r'/'%0D'}"
        
        echo "body=$BODY" >> $GITHUB_OUTPUT
        echo "version=${FILENAME%.*}" >> $GITHUB_OUTPUT

    - name: Generate SLSA Provenance
      uses: slsa-framework/slsa-github-generator@v1.9.0
      with:
        base64-subjects: "${{ hashFiles('json/*.json') }}"
        provenance-name: "provenance.att"
        upload-assets: true

    - name: Create Release
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.metadata.outputs.version }}
        release_name: "Scan ${{ steps.metadata.outputs.version }}"
        body: ${{ steps.metadata.outputs.body }}
        draft: false
        prerelease: false

    - name: Upload JSON Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: json/${{ steps.get-filename.outputs.filename }}
        asset_name: ${{ steps.get-filename.outputs.filename }}
        asset_content_type: application/json

    - name: Upload Provenance
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: provenance.att
        asset_name: provenance.att
        asset_content_type: application/vnd.in-toto+jwt 